{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3929ae6b",
   "metadata": {},
   "source": [
    "# Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb7be41a",
   "metadata": {},
   "source": [
    "`RhythmicSegments` supports several convenience operations, such as selecting subsets, filtering, querying metadata, and shuffling. Each of these returns a new instance with the metadata kept in sync."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "37b33d17",
   "metadata": {},
   "outputs": [],
   "source": [
    "from rhythmic_segments import RhythmicSegments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc666d59",
   "metadata": {},
   "source": [
    "## Taking subsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "88229d13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 2.],\n",
       "       [2., 3.],\n",
       "       [3., 4.],\n",
       "       [4., 5.],\n",
       "       [5., 6.],\n",
       "       [6., 7.],\n",
       "       [7., 8.],\n",
       "       [8., 9.]], dtype=float32)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "intervals = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "meta = { \"label\": list('abcdefghi') }\n",
    "rs = RhythmicSegments.from_intervals(intervals, length=2, meta=meta)\n",
    "rs.segments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "75ee7466",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 2.],\n",
       "       [2., 3.],\n",
       "       [3., 4.]], dtype=float32)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# You can do very basic indexing: select the first three segments:\n",
    "head = rs.take([0, 1, 2])\n",
    "head.segments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf0097ad",
   "metadata": {},
   "source": [
    "Metadata is preserved as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "736be674",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label_1</th>\n",
       "      <th>label_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b</td>\n",
       "      <td>c</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c</td>\n",
       "      <td>d</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label_1 label_2\n",
       "0       a       b\n",
       "1       b       c\n",
       "2       c       d"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "head.meta"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46fb0ede",
   "metadata": {},
   "source": [
    "## Filtering & querying"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce98ea4f",
   "metadata": {},
   "source": [
    "You can also filter segments based on some condition. For example, selecting all segments with a certain duration:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3d55de38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5., 6.],\n",
       "       [6., 7.],\n",
       "       [7., 8.],\n",
       "       [8., 9.]], dtype=float32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rs.filter(rs.durations > 10).segments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2a6cf2",
   "metadata": {},
   "source": [
    "Since this is a common use case, `filter_by_duration` allows you to filter the duration using a `min/max_value`, or using a quantile set by `min/max_quantile`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9d00fd58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3., 4.],\n",
       "       [4., 5.],\n",
       "       [5., 6.],\n",
       "       [6., 7.],\n",
       "       [7., 8.],\n",
       "       [8., 9.]], dtype=float32)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove all segments with a duration below 6\n",
    "rs.filter_by_duration(min_value=6).segments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fb6c635c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 2.],\n",
       "       [2., 3.],\n",
       "       [3., 4.],\n",
       "       [4., 5.],\n",
       "       [5., 6.],\n",
       "       [6., 7.]], dtype=float32)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Keep only the shortest 80% of the segments\n",
    "rs.filter_by_duration(max_quantile=.8).segments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed2f1179",
   "metadata": {},
   "source": [
    "You can also query metadata using pandas query syntax. For example, selecting all segments whose label contains the letter 'b':"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b16b8e99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label_1</th>\n",
       "      <th>label_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b</td>\n",
       "      <td>c</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label_1 label_2\n",
       "0       a       b\n",
       "1       b       c"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rs.query(\"label_1.str.contains('b') | label_2.str.contains('b')\").meta"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3da2b052",
   "metadata": {},
   "source": [
    "## Shuffling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e4a45ea",
   "metadata": {},
   "source": [
    "Or shuffle segments:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b078afda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6., 7.],\n",
       "       [1., 2.],\n",
       "       [2., 3.],\n",
       "       [5., 6.],\n",
       "       [3., 4.],\n",
       "       [7., 8.],\n",
       "       [4., 5.],\n",
       "       [8., 9.]], dtype=float32)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rs.shuffle(random_state=1).segments"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}